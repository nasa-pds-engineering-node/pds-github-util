[metadata]
name = pds_github_util
author = PDS
author_email = pds_operator@jpl.nasa.gov
description = Utility functions for software life cycle enforcement on github
long_description = file: README.md
long_description_content_type = text/markdown
version = file: src/pds_github_util/VERSION.txt
license = apache-2.0
keywords = pds, planetary data, various, other, keywords
url = "https://github.com/NASA-PDS/pds-github-util"
download_url = "https://github.com/NASA-PDS/pds-github-util/releases/"
classifiers =
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.9
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent


[options]
install_requires =
    github3.py>=1.3
    lxml>=4.5
    mdutils>=1.2
    packaging==20.9
    markdown2==2.3
    jinja2==3.0.1
    emoji==0.5
    gitpython==3.1
    requests==2.23.0
    beautifulsoup4==4.9.0
    rstcloth==0.3.1
    pyyaml==5.4.1

# Change this to False if you use things like __file__ or __path__â€”which you
# shouldn't use anyway, because that's what ``pkg_resources`` is for ðŸ™‚
zip_safe = True
include_package_data = True
namespace_packages = pds
# base directory for code is in src/. Don't change this.
package_dir =
    = src
packages = find_namespace:
python_requires = >= 3.9

#[options.extras_require]
#dev =
    #black
    #flake8
    #flake8-bugbear
    #flake8-docstrings
    #pep8-naming
    #mypy
    #pydocstyle
    #coverage
    #pytest
    #pytest-cov
    #pytest-watch
    #pytest-xdist
    #pre-commit
    #sphinx
    #sphinx-rtd-theme
    #tox
    #types-setuptools

[options.entry_points]
console_scripts =
    snapshot-release=pds_github_util.release.maven_release:main
    maven-release=pds_github_util.release.maven_release:main
    python-release=pds_github_util.release.python_release:main
    requirement-report=pds_github_util.requirements.generate_requirements:main
    git-ping=pds_github_util.branches.git_ping:main
    summaries=pds_github_util.gh_pages.build_summaries:main
    pds4-validate=pds_github_util.utils.pds4_validate:main
    ldd-gen=pds_github_util.utils.ldd_gen:main
    ldd-release=pds_github_util.release.ldd_release:main
    release-plan=pds_github_util.plan.plan:main
    milestones=pds_github_util.milestones.milestones:main
    pds-issues=pds_github_util.issues.issues:main
    pds-labels=pds_github_util.issues.labels:main

[options.packages.find]
# Don't change this. Needed to find packages under src/
where = src

[options.package_data]
* = VERSION.txt, *.template, gh_pages/resources/*, gh_pages/resources/images/*
pds_github_util = VERSION.txt, html/*.template, gh_pages/resources/*, gh_pages/resources/images/*



## Coverage Testing
## ----------------
##
## The ``coverage`` tool helps ensure that all parts of your code is actually
## used. The settings here tell what files we can skip. Feel free to adjust
## this.
##
## See https://coverage.readthedocs.io/ for more.
#[coverage:run]
#omit = */_version.py,*/__init__.py


## Pytest
## ------
##
## Pytest is the modern way to run all sorts of tests in code. It works with
## the ``unittest`` module in the Python Standard Library and also offers its
## own shortcuts to simplifying writing and running tests.
##
## See https://docs.pytest.org/ for more information.
#[tool:pytest]
#addopts = -n auto --cov=pds


## Flake8
## ------
##
## Flake8 (pronounced "flay-kate") is a Python style guide tool. It checks your
## code against a library of "best practices" for writing Python and lets you
## know when things aren't quite the "best". There are numerous options below
## and you can read more about the tool at https://flake8.pycqa.org/
#[flake8]
#max-line-length = 120
#extend-exclude = versioneer.py,_version.py,docs,tests,setup.py
#docstring_convention = google

## Ignoring:
## E203 prevents flake8 from complaining about whitespace around slice
## components. Black formats per PEP8 and flake8 doesn't like some of
## this.
##
## E501 prevents flake8 from complaining line lengths > 79. We will use
## flake8-bugbear's B950 to handle line length lint errors. This trips
## when a line is > max-line-length + 10%.
#extend-ignore = E203, E501

## Selects following test categories:
## D: Docstring errors and warnings
## E, W: PEP8 errors and warnings
## F: PyFlakes codes
## N: PEP8 Naming plugin codes
## B: flake8-bugbear codes
## B***: Specific flake8-bugbear opinionated warnings to trigger
##   B902: Invalid first argument used for method. Use self for instance
##       methods, and cls for class methods
##   B903: Use collections.namedtuple (or typing.NamedTuple) for data classes
##       that only set attributes in an __init__ method, and do nothing else.
##   B950: Line too long. This is a pragmatic equivalent of pycodestyle's
##       E501: it considers "max-line-length" but only triggers when the value
##       has been exceeded by more than 10%.
#select = D,E,F,N,W,B,B902,B903,B950


## mypy
## ----
##
## ``mypy`` checks your use of type annotations in modern Python code, similar
## to compile-time type checking in statically typed languages. This helps
## detect errors early instead of at run-time where they're much harder to
## debug.
##
## For more information about ``mypy``, see: https://mypy.readthedocs.io/

#[mypy]
## The generic ``mypy`` settings are blank for now, but there are more specific
## options below. Note that the section syntax for ``mypy`` includes
## glob-style wildcards to match file patterns.
